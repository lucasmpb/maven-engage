<?php

namespace MavenShop\Core;

use MavenShop\Core\Domain\Product,
    MavenShop\Core\Mappers\ProductMapper;

class ProductManager implements iSearchManager {

	private $mapper = null;

	public function __construct() {
		$this->mapper = new ProductMapper();
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\Product $donation
	 * @return \MavenShop\Core\Domain\Product
	 */
	function addProduct( \MavenShop\Core\Domain\Product $product ) {

		$categoriesMapper = new Mappers\CategoryMapper();


		$update = false;
		if ( $product->getId() )
			$update = true;

		//We save the product, we need the id for the related data
		$savedProduct = $this->mapper->save( $product );

		$categoriesMapper->addCategories( $product->getCategories(), $savedProduct );

		// If variations isn't enabled we have to delete everything. Just in case the product had variations before.
		if ( ! $savedProduct->isVariationsEnabled() ) {
			$variationsManager = new VariationManager();
			$variationsManager->deleteThingVariations( $savedProduct->getId() );
		}

		if ( $update )
			Actions::UpdateProduct( $product );
		else
			Actions::AddProduct( $product );

		return $savedProduct;
	}

	/**
	 * Get an product
	 * @param int $productId
	 * @return \MavenShop\Core\Domain\Product
	 */
	public function get( $productId ) {

		if ( intval( $productId ) === 0 ) {
			throw new \Maven\Exceptions\MissingParameterException( "Product id is required" );
		}

		$product = $this->mapper->get( $productId );

		$this->loadProductInformation( $product );


		return $product;
	}

	/**
	 * Get product prices
	 * @param \MavenShop\Core\Mappers\Product|int $product
	 * @regurn \MavenShop\Core\Domain\ProductRolePrice[]
	 */
	public function getPricesByRoles( $product ) {
		return $this->mapper->getPricesByRoles( $product );
	}

	/**
	 * Retrieve product by slug
	 * @param string $slug
	 * @return \MavenShop\Core\Domain\Product
	 */
	public function getProductBySlug( $slug ) {

		$post = get_page_by_path( $slug, OBJECT, ShopConfig::productTypeName );

		return $this->getProductFromPost( $post );
	}

	/**
	 * 
	 * @param WP_Post $wpProductPost
	 * @return \MavenShop\Core\Domain\Product
	 * @throws \Maven\Exceptions\MissingParameterException
	 * @throws \Maven\Exceptions\NotFoundException
	 */
	public function getProductFromPost( $wpProductPost ) {

		if ( ! is_object( $wpProductPost ) || ! isset( $wpProductPost->ID ) ) {
			throw new \Maven\Exceptions\MissingParameterException( "Product post is required" );
		}

		$product = $this->mapper->get( $wpProductPost->ID, false );

		if ( ! $product ) {
			throw new \Maven\Exceptions\NotFoundException( 'Product not found' );
		}

		$product->setUrl( $wpProductPost->post_name );

		$this->loadProductInformation( $product );

		return $product;
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\Product $product
	 * @return \MavenShop\Core\Domain\Product
	 */
	private function loadProductInformation( Product $product ) {

		$categoriesMapper = new Mappers\CategoryMapper();
		$variationsManager = new VariationManager();

		$product->setCategories( $categoriesMapper->getProductCategories( $product->getId() ) );

		if ( $product->isVariationsEnabled() ) {
			$product->setVariations( $variationsManager->getVariations( $product->getId() ) );
		}

		$pricesByRoles = $this->getPricesByRoles( $product );
		$product->setPricesByRole( $pricesByRoles );

		return $product;
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\ProductFilter $filter
	 * @return \MavenShop\Core\Domain\Product[]
	 */
	/* public function getProducts( \MavenShop\Core\Domain\ProductFilter $filter ) {

	  return $this->mapper->getAll();
	  } */

	/**
	 * 
	 * @param \MavenShop\Core\Domain\ProductFilter $filter
	 * @return \MavenShop\Core\Domain\Product[]
	 */
	public function getProducts( \MavenShop\Core\Domain\ProductFilter $filter, $orderBy = 'name', $orderType = 'desc', $start = 0, $limit = 1000 ) {
		return $this->mapper->getProducts( $filter, $orderBy, $orderType, $start, $limit );
	}

	public function getProductsCount( \MavenShop\Core\Domain\ProductFilter $filter ) {
		return $this->mapper->getProductsCount( $filter );
	}

	public function delete( $id ) {

		if ( ! $id )
			throw new \Maven\Exceptions\MissingParameterException( 'Id is required' );

		$variationManager = new VariationManager();

		$variationManager->deleteThingVariations( $id );

		return $this->mapper->remove( $id );
	}

	public function calculateProductPrice( Product $product, $variationsID ) {

		$isWholesale = $this->isWholesale();

		$productPrice = $isWholesale ? $product->getWholesalePrice() : $product->getPrice();

		if ( $variationsID ) {
			//TODO: Calculate variations price
			$varManager = new VariationGroupManager();

			$variationGroup = $varManager->getByKey( $variationsID );

			if ( $variationGroup ) {
				$productPrice = $varManager->applyVariationPrice($productPrice, $variationGroup, $isWholesale);
			}
		}
		//Check if price is negative
		if ( $productPrice < 0 )
			$productPrice = 0;


		return $productPrice;
	}

	private function isWholesale() {
		if ( \Maven\Core\UserManager::isUserLoggedIn() ) {

			$registry = \MavenShop\Settings\ShopRegistry::instance();
			$wholesaleRole = $registry->getWholesaleRole();
			//TODO: We need to get 'wholesale' role from a configuration maybe?
			if ( \current_user_can( $wholesaleRole ) ) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

}
