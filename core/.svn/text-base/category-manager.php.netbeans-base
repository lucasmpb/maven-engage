<?php

namespace MavenShop\Core;

class CategoryManager {

	public function __construct() {
		;
	}

	public function getAll() {

		$mapper = new Mappers\CategoryMapper();

		return $mapper->getAll();
	}

	/**
	 * Insert a Maven cateogry only
	 * @param \MavenShop\Core\Domain\Category $category
	 * @return \MavenShop\Core\Domain\Category
	 */
	public function addMavenCategory( \MavenShop\Core\Domain\Category $category){
		
		$mapper = new Mappers\CategoryMapper();

		return $mapper->insertMavenCategory( $category );
		
	}
	
	public function updateMavenCategory( \MavenShop\Core\Domain\Category $category ){
		$mapper = new Mappers\CategoryMapper();

		return $mapper->updateMavenCategory( $category );
	}
	
	public function deleteMavenCategory( $categoryId ){
		$mapper = new Mappers\CategoryMapper();

		return $mapper->deleteMavenCategory( $categoryId );
	}
	
	
	/**
	 * 
	 * @param \MavenShop\Core\Domain\Category or array $category
	 * @return \Maven\Core\Message\Message
	 */
	function addCategory( $category ) {

		$categoryToUpdate = new Domain\Category();

		if ( is_array( $category ) ) {
			\Maven\Core\FillerHelper::fillObject( $categoryToUpdate, $category );
		} else {
			$categoryToUpdate = $category;
		}

		$mapper = new Mappers\CategoryMapper();

		return $mapper->save( $categoryToUpdate );
	}

	public function get( $id ) {

		if ( !$id ) {
			throw new \Maven\Exceptions\MissingParameterException( 'ID is required' );
		}

		$mapper = new Mappers\CategoryMapper();

		$category = $mapper->get( $id );

		if ( !$category ) {
			throw new \Maven\Exceptions\NotFoundException( 'Category not found:' . $id );
		}

		return $category;
	}

	public function delete( $id ) {

		if ( !$id ) {
			throw new \Maven\Exceptions\MissingParameterException( 'ID is required' );
		}

		$categoryMapper = new Mappers\CategoryMapper();


		// We remove the term
		wp_delete_term( $id, ShopConfig::categoryTypeName );

		return $categoryMapper->delete( $id );
	}

}

