<?php

namespace MavenShop\Core;

class ShopApi {

	/**
	 * 
	 * @param \MavenShop\Core\ProductFilter $filter
	 * @return \MavenShop\Core\Domain\Product[]
	 */
	public static function getProducts( \MavenShop\Core\Domain\ProductFilter $filter ) {

		$manager = null;

		if ( ! $filter->useWpMethods() )
			$manager = new ProductManager();
		else
			$manager = new WpSearchManager();

		return $manager->getProducts( $filter );
	}

	/**
	 * Retrieve object by slug, id, or objet it self
	 * @param string|int|\MavenShop\Core\Domain\Product $product
	 * @return \MavenShop\Core\Domain\Product
	 * @throws \Maven\Exceptions\MissingParameterException
	 * @throws \Maven\Exceptions\MavenException
	 */
	public static function getProduct( $product ) {

		if ( ! $product ) {
			throw new \Maven\Exceptions\MissingParameterException( 'Product is required. It can be an id or a wp post' );
		}

		$manager = new \MavenShop\Core\ProductManager();

		if ( is_object( $product ) && isset( $product->ID ) ) {
			return $manager->getProductFromPost( $product );
		} else if ( is_numeric( $product ) ) {
			return $manager->get( $product );
		} else {
			return $manager->getProductBySlug( $product );
		}

		throw new \Maven\Exceptions\MavenException( 'Invalid product' );
	}

	public static function calculateProductPrice( $product, $variationsID = NULL) {

		$manager = new \MavenShop\Core\ProductManager();

		return $manager->calculateProductPrice( $product, $variationsID );
	}

	/**
	 * Create a new filter
	 * @return \MavenShop\Core\ProductFilter
	 */
	public static function newFilter() {
		return new \MavenShop\Core\Domain\ProductFilter();
	}

}
