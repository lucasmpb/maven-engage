<?php

namespace MavenShop\Core\Mappers;

use \MavenShop\Core\ShopConfig;

class CategoryMapper extends \Maven\Core\Db\WordpressMapper {

	public function __construct() {

		parent::__construct( \MavenShop\Core\ShopConfig::categoriesTableName );
	}

	public function getAll( \MavenShop\Core\Domain\CategoryFilter $filter, $orderBy = "name", $orderType = 'desc', $start = 0, $limit = 1000 ) {
		$where = '';
		$values = array();

		$name = $filter->getName();
		if ( $name ) {
			$values[] = "%{$name}%";
			$where.=" AND name LIKE %s";
		}
		if ( ! $orderBy )
			$orderBy = 'id';

		$values[] = $start;
		$values[] = $limit;

		$query = "select	{$this->tableName}.*
					from {$this->tableName} 
					where 1=1 
					{$where} order by {$orderBy} {$orderType}
					LIMIT %d , %d;";

		$query = $this->prepare( $query, $values );

		$results = $this->getQuery( $query );

		$categories = array();

		foreach ( $results as $row ) {
			$category = new \MavenShop\Core\Domain\Category();
			$this->fillObject( $category, $row );

			// If we fell that performance is an issue, this line can be improved, reading all the term data together with the venues.
			$term = get_term( $category->getId(), ShopConfig::categoryTypeName );

			if ( $term )
				$category->setSlug( $term->slug );

			$categories[] = $category;
		}

		return $categories;
	}

	public function getCount( \MavenShop\Core\Domain\CategoryFilter $filter ) {

		$where = '';
		$values = array();

		$name = $filter->getName();
		if ( $name ) {
			$values[] = "%{$name}%";
			$where.=" AND name LIKE %s";
		}

		$query = "select count(*)
				from {$this->tableName} 
				where 1=1
				{$where}";

		$query = $this->prepare( $query, $values );

		return $this->getVar( $query );
	}

	private function setTermSlug( \MavenShop\Core\Domain\Category $category ) {

		$term = get_term( $category->getId(), ShopConfig::categoryTypeName );

		if ( $term ) {
			$category->setSlug( $term->slug );
		}
	}

	/**
	 * Return a Category object
	 * @param int $id
	 * @return \MavenShop\Core\Domain\Category
	 */
	public function get( $id ) {

		if ( ! $id || ! is_numeric( $id ) ) {
			throw new \Maven\Exceptions\MissingParameterException( 'Id: is required' );
		}

		$category = new \MavenShop\Core\Domain\Category();

		$row = $this->getRowById( $id );

		if ( ! $row ) {
			throw new \Maven\Exceptions\NotFoundException();
		}

		$this->fillObject( $category, $row );

		$this->setTermSlug( $category );

		return $category;
	}

	public function delete( $categoryId ) {

		$result = wp_delete_term( $categoryId, ShopConfig::categoryTypeName );

		if ( is_wp_error( $result ) ) {
			throw new \Maven\Exceptions\MapperException( $result->get_error_message() );
		}

		//remove the presenter from the products
		$relationTable = ShopConfig::productsCategoriesTableName;

		$query = "DELETE FROM {$relationTable} where category_id = %d";

		$query = $this->db->prepare( $query, $categoryId );

		$this->executeQuery( $query );

		parent::delete( $categoryId );

		return true;
	}

	public function deleteRelation( $categoryId, $productId ) {

		$relationTable = ShopConfig::productsCategoriesTableName;

		$query = "DELETE FROM {$relationTable} where product_id = %d and category_id = %d";

		$query = $this->db->prepare( $query, $productId, $categoryId );

		return $this->executeQuery( $query );
		//parent::delete( $presenterId );
		//return true;
	}

	public function addRelation( $categoryId, $productId ) {
		$relationTable = ShopConfig::productsCategoriesTableName;

		//TODO: CHECK if relation exist
		$query = "SELECT id FROM {$relationTable} where product_id = %d and category_id = %d";

		$query = $this->db->prepare( $query, $productId, $categoryId );

		$row = $this->executeQuery( $query );

		//var_dump($row);
		if ( ! $row ) {

			$query = "INSERT INTO {$relationTable}(product_id , category_id) VALUES (%d , %d)";

			$query = $this->db->prepare( $query, $productId, $categoryId );

			return $this->executeQuery( $query );
		} else {
			return $row;
		}
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\Category $category
	 * @return \MavenShop\Core\Domain\Category
	 */
	public function insertMavenCategory( \MavenShop\Core\Domain\Category $category ) {

		$category->sanitize();

		$data = array(
		    'name' => $category->getName(),
		    'id' => $category->getId(),
		    'description' => $category->getDescription(),
		    'term_id' => $category->getTermId(),
		    'term_taxonomy_id' => $category->getTermTaxonomyId()
		);

		$format = array(
		    '%s', //name
		    '%d', // id
		    '%s', //description
		    '%d', //term_id
		    '%d' //term_taxonomy_id		    
		);

		$categoryId = $this->insert( $data, $format );

		return $category;
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\Category $category
	 * @return \MavenShop\Core\Domain\Category
	 */
	public function updateMavenCategory( \MavenShop\Core\Domain\Category $category ) {

		$category->sanitize();

		$data = array(
		    'name' => $category->getName(),
		    'description' => $category->getDescription(),
		    'term_id' => $category->getTermId(),
		    'term_taxonomy_id' => $category->getTermTaxonomyId()
		);

		$format = array(
		    '%s', //name
		    '%s', //description
		    '%d', //term_id
		    '%d' //term_taxonomy_id		    
		);

		$this->updateById( $category->getId(), $data, $format );

		return $category;
	}

	/**
	 * 
	 * @param \MavenShop\Core\Domain\Category $category
	 */
	public function deleteMavenCategory( $categoryId ) {

		parent::delete( $categoryId );
	}

	/** Create or update the category to the database
	 * 
	 * @param \MavenShop\Core\Domain\Category $category
	 * @return \MavenShop\Core\Domain\Category
	 */
	public function save( \MavenShop\Core\Domain\Category $category ) {

		$category->sanitize();

		$data = array(
		    'name' => $category->getName(),
		    'description' => $category->getDescription(),
		    'term_id' => $category->getTermId(),
		    'term_taxonomy_id' => $category->getTermTaxonomyId()
		);

		$format = array(
		    '%s', //name
		    '%s', //description
		    '%d', //term_id
		    '%d' //term_taxonomy_id		    
		);

		if ( ! $category->getId() ) {
			try {

				$result = wp_insert_term( $category->getName(), ShopConfig::categoryTypeName, array( 'description' => $category->getDescription() ) );

				if ( is_wp_error( $result ) ) {
					throw new \Maven\Exceptions\MapperException( $result->get_error_message() );
				}

				$data[ 'term_id' ] = $result[ 'term_id' ];
				$data[ 'term_taxonomy_id' ] = $result[ 'term_taxonomy_id' ];
				$data[ 'id' ] = $result[ 'term_id' ];

				$categoryId = $this->insert( $data, $format );
			} catch ( \Exception $ex ) {

				return \Maven\Core\Message\MessageManager::createErrorMessage( $ex->getMessage() );
			}

			$category->setId( $categoryId );
		} else {
			$this->updateById( $category->getId(), $data, $format );

			wp_update_term( $category->getTermId(), ShopConfig::categoryTypeName, array( 'slug' => $category->getSlug(), 'description' => $category->getDescription() ) );
		}

		return $category;
	}

	public function getProductCategories( $productId, $orderBy = "display_name" ) {

		$instances = array();
		$relTable = ShopConfig::productsCategoriesTableName;
		$query = "select categories.* from {$this->tableName} categories 
			inner join {$relTable} rel on categories.id=rel.category_id
			where rel.product_id=%d";
		$query = $this->db->prepare( $query, $productId );

		//$results = $this->getResultsBy( 'product_id', $productId, $orderBy );
		$results = $this->db->get_results( $query );

		foreach ( $results as $row ) {
			$instance = new \MavenShop\Core\Domain\Category();
			$this->fillObject( $instance, $row );

			$instances[] = $instance;
		}

		return $instances;
	}

	public function addCategories( $categories, \MavenShop\Core\Domain\Product $product ) {

		if ( is_null( $categories ) ) {
			$categories = array();
		}

		if ( ! $product->getId() ) {
			throw new \Maven\Exceptions\MissingParameterException( 'Product Id is required' );
		}

		/* First: remove missing categories */
		$existingCategories = $this->getProductCategories( $product->getId() );

		foreach ( $existingCategories as $exCategory ) {

			//search the category in the incoming array
			$existingId = $exCategory->getId();

			$found = array_filter( $categories, function($item) use ($existingId) {
				if ( $item->getId() == $existingId ) {
					return true;
				}

				return false;
				//return array_key_exists( 'id', $item ) && $item[ 'id' ] == $existingId;
			} );

			if ( ! $found ) {
				//The category is not in the array, delete the relation
				$this->deleteRelation( $existingId, $product->getId() );
			}
		}

		/* Second: Update/Insert new categories */
		foreach ( $categories as $category ) {

//			$category = new \MavenShop\Core\Domain\Category();
//
//			$this->fillObject( $category, $categoryRow );

			$this->save( $category );

			//add the relation
			$this->addRelation( $category->getId(), $product->getId() );
		}

		return true;
	}

	public function fill( $object, $row ) {
		$this->fillObject( $object, $row );
	}

}
