<?php

namespace MavenShop\Core\Mappers;

use \MavenShop\Core\ShopConfig;

class ProductMapper extends \Maven\Core\Db\WordpressMapper {
	
	private $productsCategoriesTableName=\MavenShop\Core\ShopConfig::productsCategoriesTableName;
	private $productsPricesByRolesTableName=\MavenShop\Core\ShopConfig::productsProcesByRolesTableName;
	
	
	public function __construct() {

		parent::__construct( \MavenShop\Core\ShopConfig::productTableName );
	}

	public function getProducts( \MavenShop\Core\Domain\ProductFilter $filter, $orderBy = 'name', $orderType = 'desc', $start = 0, $limit = 1000 ) {

		$where = '';
		$values = array();
		//first value is plugin key
		//$values[] = $filter->getPluginKey();

		$name = $filter->getName();
		if ( $name ) {
			$values[] = "%{$name}%";
			$where.=" AND p.name LIKE %s";
		}

		$text = $filter->getText();
		if ( $text ) {
			$values[] = "%{$text}%";
			$where.=" AND p.summary LIKE %s";
		}

		$description = $filter->getDescription();
		if ( $description ) {
			$values[] = "%{$description}%";
			$where.=" AND p.description LIKE %s";
		}
		
		$category=$filter->getCategory();
		if($category){
			$values[] = "{$category}";
			$where.=" AND pc.category_id = %d";
		}

		if ( ! $orderBy ){
			$orderBy = 'id';
		}


		$query = "select	p.*
					from {$this->tableName} p 
					left join {$this->productsCategoriesTableName} pc on p.id=pc.product_id
					where 1=1 
					{$where} order by {$orderBy} {$orderType}
					LIMIT %d , %d;";
				
		//other values
		//$values[ ] = $orderBy;
		//$values[ ] = $orderType;
		$values[] = $start;
		$values[] = $limit;
		//$query = $this->prepare( $query, $filter->getPluginKey(), $orderBy, $orderType, $start, $limit );
		$query = $this->prepare( $query, $values );

		$results = $this->getQuery( $query );

		$products = array();

		foreach ( $results as $row ) {
			$product = new \MavenShop\Core\Domain\Product();

			$postProduct = get_post( $row->id );

			//if ( ! $postProduct )
			//	throw new \Maven\Exceptions\NotFoundException( 'PostProduct not found!' );

			if ( $postProduct ) {
				$product->setUrl( $postProduct->post_name );
			}


			$this->fillObject( $product, $row );
			$products[] = $product;
		}

		return $products;
	}

	public function getProductsCount( \MavenShop\Core\Domain\ProductFilter $filter ) {
		$where = '';
		$values = array();
		//first value is plugin key
		//$values[] = $filter->getPluginKey();

		$name = $filter->getName();
		if ( $name ) {
			$values[] = "%{$name}%";
			$where.=" AND name LIKE %s";
		}

		$text = $filter->getText();
		if ( $text ) {
			$values[] = "%{$text}%";
			$where.=" AND summary LIKE %s";
		}

		$description = $filter->getDescription();
		if ( $description ) {
			$values[] = "%{$description}%";
			$where.=" AND description LIKE %s";
		}
		
		$query = "select count(*)
					from {$this->tableName} 
					where 1=1
					{$where}";

		//$query = $this->prepare( $query, $filter->getPluginKey(), $orderBy, $orderType, $start, $limit );
		$query = $this->prepare( $query, $values );

		return $this->getVar( $query );
	}

	public function getAll( $orderBy = "name" ) {

		$products = array();
		$results = $this->getResults( $orderBy );

		foreach ( $results as $row ) {
			$product = new \MavenShop\Core\Domain\Product();

			$postProduct = get_post( $row->id );

			//if ( ! $postProduct )
			//	throw new \Maven\Exceptions\NotFoundException( 'PostProduct not found!' );

			if ( $postProduct ) {
				$product->setUrl( $postProduct->post_name );
			}


			$this->fillObject( $product, $row );
			$products[] = $product;
		}

		return $products;
	}

	/**
	 * Return a product object
	 * @param int $id/array
	 * @param bool $readWpPost
	 * @return \MavenShop\Core\Domain\Product
	 */
	public function get( $id, $readWpPost = true ) {

		$product = new \MavenShop\Core\Domain\Product();

		if ( !$id ) {
			throw new \Maven\Exceptions\MissingParameterException( 'Id: is required' );
		}


		$row = $this->getRowById( $id );

		if ( ! $row ) {
			throw new \Maven\Exceptions\NotFoundException();
		}

		if ( $readWpPost ) {
			$postProduct = get_post( $id );

			//if ( ! $postProduct )
			//	throw new \Maven\Exceptions\NotFoundException( 'PostProduct not found!' );

			if ( $postProduct ) {
				$product->setUrl( $postProduct->post_name );
			}
		}

		$this->fillObject( $product, $row );

		return $product;
	}

	public function remove( $id ) {

		if ( ! $id ) {
			throw new \Maven\Exceptions\MissingParameterException( 'Id: is required' );
		}


		//delete product
		$this->delete( $id );

		//delete post
		wp_delete_post( $id );
	}
	
	/**
	 * Get product prices
	 * @param \MavenShop\Core\Mappers\Product|int $product
	 * @return \MavenShop\Core\Domain\ProductRolePrice[]
	 */
	public function getPricesByRoles( $product ){
		
		$productId = 0;
		
		if ( $product instanceof \MavenShop\Core\Domain\Product ) {
			$productId = $product->getId();
		} else {
			$productId = ( int ) $product;
		}

		$pricesRows = $this->getResultsBy( 'product_id', $productId, 'role', 'asc', '%d', $this->productsPricesByRolesTableName );
		
		$prices = array();
		foreach ( $pricesRows as $row ) {
			
			$price = new \MavenShop\Core\Domain\ProductRolePrice();

			$this->fillObject( $price, $row );
			$prices[$price->getRole()] = $price;
		}
		
		return $prices;
		
	}
	
	public function insertPricesByRoles( \MavenShop\Core\Domain\Product $product ){
		
		// Insert product prices
		if ( ! $product->hasPricesByRoles() ){
			return;
		}
 
		foreach( $product->getPricesByRole() as $priceRole ){
			
			$data = array(
				'role'=>$priceRole->getRole(),
				'price'=> $priceRole->getPrice(),
				'product_id' => $product->getId()
				);
			
			$format = array(
				"%s",
				"%f",
				"%d"
				);
			
			
			$id = $this->insert($data, $format, $this->productsPricesByRolesTableName);
			
			$priceRole->setId( $id );
			
		}
		
	}
	
	
	public function updatePricesByRoles( \MavenShop\Core\Domain\Product $product ){
		
		if ( $product->hasPricesByRoles() ) {
			foreach ( $product->getPricesByRole() as $priceRole ) {

				$data = array(
					'role' => $priceRole->getRole(),
					'price' => $priceRole->getPrice(),
					'product_id' => $product->getId()
				);

				$format = array(
					"%s",
					"%f",
					"%d"
				);

				$id = $this->updateById( $priceRole->getId(), $data, $format, $this->productsPricesByRolesTableName );

				$ids[] = $priceRole->getId();
			}

			$ids = join( ',', $ids );

			//Remove the missing roles
			$query = "DELETE FROM {$this->productsPricesByRolesTableName} WHERE id not in ({$ids}) and product_id = " . $product->getId();
		} else {
			//Remove the missing roles
			$query = "DELETE FROM {$this->productsPricesByRolesTableName} WHERE product_id = " . $product->getId();
		}


		$this->executeQuery($query);
		
	}

	/** 
	 * Create or update the donation to the database
	 * @param \MavenShop\Core\Domain\Product $product
	 * @return \MavenShop\Core\Domain\Product
	 */
	public function save( \MavenShop\Core\Domain\Product $product ) {

		$product->sanitize();

		$productData = array(
		    'name' => $product->getName(),
		    'summary' => $product->getSummary(),
		    'description' => $product->getDescription(),
		    'featured_image' => $product->getFeaturedImage(),
		    'gallery_images' => $product->getGalleryImagesForDB(),
		    'featured' => $product->isFeature(),
		    'price' => $product->getPrice(),
		    'wholesale_price' => $product->getWholesalePrice(),
		    'sale_price' => $product->getSalePrice(),
		    'sale_price_from' => $product->getSalePriceFrom(),
		    'sale_price_to' => $product->getSalePriceTo(),
		    'stock_enabled' => $product->isStockEnabled(),
		    'stock' => $product->getStock(),
		    'weight' => $product->getWeight(),
		    'lenght' => $product->getLenght(),
		    'width' => $product->getWidth(),
		    'height' => $product->getHeight(),
		    'reserved' => $product->isReserved(),
		    'reservation_password' => $product->getReservationPassword(),
		    'sku' => $product->getSku(),
		    'variations_enabled' => $product->isVariationsEnabled(),
		    'unit_of_measure' => $product->getUnitOfMeasure(),
		    'unit_of_measure_weight' => $product->getUnitOfMeasureWeight()
		);

		$format = array(
		    '%s', // name
		    '%s', // description
		    '%s', // summary
		    '%s', // featured_image
		    '%s', // gallery_images
		    '%d', // featured
		    '%f', // price
		    '%f', // wholesale_price
		    '%f', // sale_price
		    '%s', // sale_price_from
		    '%s', // sale_price_to
		    '%d', // stock_enabled
		    '%f', // stock
		    '%f', // weight
		    '%f', // lenght
		    '%f', // width
		    '%f', // height
		    '%d', // reserved
		    '%s', // reservation_password
		    '%s', // Sku
		    '%d', // variations_enabled
		    '%s', // unit_of_measure
		    '%s' // unit_of_measure_weight
		);

		if ( ! $product->getId() ) {
			try {

				$currentUserID = get_current_user_id();

				$postData = array(
				    'post_status' => 'publish',
				    'post_type' => ShopConfig::productTypeName,
				    'post_author' => $currentUserID,
				    'post_title' => $product->getName(),
				    'post_content' => $product->getDescription(),
				    'post_excerpt' => $product->getSummary(),
				    'tax_input' => array()
				);


				//Related Categories
				$categoriesID = array();
				
				if ( $product->hasCategories() ) {
					$categories = $product->getCategories();
					foreach ( $categories as $category ) {
						$categoriesID[] = $category->getId();
					}
				}
				
				$postData[ 'tax_input' ][ ShopConfig::categoryTypeName ] = $categoriesID;

				$postId = wp_insert_post( $postData );

				if ( is_wp_error( $postId ) ) {
					throw new \Maven\Exceptions\MapperException( $postId->get_error_message() );
				}

				if ( $product->getFeaturedImage() ) {
					set_post_thumbnail( $postId, $product->getFeaturedImage() );
				}

				// Post and product share the same id
				$productData[ 'id' ] = $postId;

				$productId = $this->insert( $productData, $format );
				
				
			} catch ( \Exception $ex ) {

				return \Maven\Core\Message\MessageManager::createErrorMessage( $ex->getMessage() );
			}

			$product->setId( $productId );
			
			$this->insertPricesByRoles( $product );
			
		} else {

			$this->updateById( $product->getId(), $productData, $format );

			$postData = array(
			    'ID' => $product->getId(),
			    'post_name' => $product->getUrl(),
			    'post_title' => $product->getName(),
			    'post_content' => $product->getDescription(),
			    'post_excerpt' => $product->getSummary(),
			    'tax_input' => array()
			);

			//Related Categories
			$categoriesID = array();
			if ( $product->hasCategories() ) {
				$categories = $product->getCategories();
				foreach ( $categories as $category ) {
					$categoriesID[] = $category->getId();
				}
			}

			$postData[ 'tax_input' ][ ShopConfig::categoryTypeName ] = $categoriesID;

			//TODO: check this
			wp_update_post( $postData );

			set_post_thumbnail( $product->getId(), $product->getFeaturedImage() );
			
			//$this->updatePricesByRoles( $product );
		}

		return $product;
	}

	public function fill( $object, $row ) {
		$this->fillObject( $object, $row );
	}

}
