<?php

namespace MavenShop\Admin\Controllers;

class Orders extends \MavenEvents\Admin\Controllers\EventsAdminController {

	public function __construct() {
		parent::__construct();
	}

	public function admin_init() {
		
	}

	public function showForm() {
		
		$orderStatusManager=new \MavenShop\Core\OrderStatusManager();
		$statuses = $orderStatusManager->getAll();

		//var_dump($statuses);
		$temp = array( array( 'label' => '', 'value' => '' ) );
		foreach ( $statuses as $name => $object ) {
			$temp[ ] = array( 'label' => $object->getName(), 'value' => $name );
		}

		$this->addJSONData( 'cachedStatuses', $temp );

		$this->addJSONData( 'completedStatusId', $orderStatusManager->getCompletedStatus()->getId() );

		$this->getOutput()->setTitle( $this->__( "Orders" ) );

		$this->getOutput()->loadAdminView( "orders" );
	}

	public function cancel() {
		
	}

	public function save() {
		
	}

	public function showList() {
		
	}

	public function orderStatsEntryPoint() {
		try {
			$event = $this->getRequest()->getProperty( 'event' );

			$orderManager = new \MavenShop\Core\OrderManager( );
			switch ( $event ) {
				case 'create':
					$this->getOutput()->sendError( 'Not implemented' );
					break;

				case 'read':
					//always return the same object
					$orders = $orderManager->getAllOrders();
					$response[ 'count' ] = count( $orders );


					$completedOrders = $orderManager->getCompletedOrders();
					$response[ 'completedCount' ] = count( $completedOrders );
					$sum = 0;
					foreach ( $completedOrders as $order ) {
						$sum+= $order->getTotal();
					}

					$response[ 'total' ] = $sum;

					$this->getOutput()->sendData( $response );

					break;

				case 'update':
					$this->getOutput()->sendError( 'Not implemented' );
					break;

				case 'delete':
					$this->getOutput()->sendError( 'Not implemented' );
					break;
			}
		} catch ( Exception $ex ) {
			$this->getOutput()->sendError( $ex->getMessage() );
		}
	}

	public function orderEntryPoint() {
		try {
			$event = $this->getRequest()->getProperty( 'event' );
			//$presenterManager = new \MavenEvents\Core\PresenterManager();

			$orderManager = new \MavenShop\Core\OrderManager( );
			switch ( $event ) {
				case 'create':
					/* $data = $this->getRequest()->getProperty( 'data' );

					  $presenter = new \MavenEvents\Core\Domain\Presenter();

					  $presenter->load($data);

					  $presenter = $presenterManager->addPresenter( $presenter );

					  $this->getOutput()->sendData( $presenter->toArray() ); */
					$this->getOutput()->sendError( 'Not implemented' );
					break;

				case 'read':
					$modelId = $this->getRequest()->getProperty( 'id' );

					if ( $modelId ) {
						try {
							$order = $orderManager->get( $modelId );
							$this->getOutput()->sendData( $order->toArray() );
						} catch ( \Maven\Exceptions\MavenException $ex ) {
							$this->getOutput()->sendError( $ex->getMessage() );
						}
					} else {
						$data = $this->getRequest()->getProperty( 'data' );

						$filter = new \Maven\Core\Domain\OrderFilter();

						if ( key_exists( 'number', $data ) && $data[ 'number' ] )
							$filter->setNumber( $data[ 'number' ] );

						if ( key_exists( 'start', $data ) && $data[ 'start' ] )
							$filter->setOrderDateFrom( $data[ 'start' ] );

						if ( key_exists( 'end', $data ) && $data[ 'end' ] )
							$filter->setOrderDateTo( $data[ 'end' ] );

						if ( key_exists( 'status', $data ) && $data[ 'status' ] )
							$filter->setStatusID( $data[ 'status' ] );

						$orders = $orderManager->getOrders( $filter );

						$response = array( );
						foreach ( $orders as $row ) {
							$response[ ] = $row->toArray();
						}

						$this->getOutput()->sendData( $response );
					}
					break;

				case 'update':
					$this->getOutput()->sendError( 'Not implemented' );
					/* $data = $this->getRequest()->getProperty( 'data' );

					  $presenter = $presenterManager->addPresenter( $data );

					  $this->getOutput()->sendData( $presenter->toArray() ); */

					break;

				case 'delete':
					$modelId = $this->getRequest()->getProperty( 'id' );

					$orderManager->delete( $modelId );

					//Empty response
					$this->getOutput()->sendData( 'deleted' );
					break;
			}
		} catch ( Exception $ex ) {
			$this->getOutput()->sendError( $ex->getMessage() );
		}
	}

}